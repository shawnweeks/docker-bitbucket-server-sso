{% raw %}{namespace bitbucket.internal.page.login.login}

/**
 * param allowSignUp
 * param showCaptcha
 * param showRememberMe
 * param? nextUrl
 * @param? error
 * param? lastUsername
 * param? permission
 * @param? warning
 * @param? wasSuccessfulSignedUp
 */
{template .login}{% endraw %}
  {literal}<script type="text/javascript">
    var ssoUrl = '{{ ATL_SSO_LOGIN_URL | default('') | replace("'", "\\'") }}';
    var contextPath = '{{ ATL_TOMCAT_CONTEXTPATH | default('') | replace("'", "\\'") }}';

    var url = new URL(window.location.href);
    var osDestination = url.searchParams.get("nextUrl");
	var autoLogin = url.searchParams.get("auto_login");
    if (autoLogin === null || autoLogin === undefined) {
      autoLogin = "true";
	}
    osDestination = osDestination ? osDestination : "";
	
	function login() {
	  window.location.replace(ssoUrl + '?redirectTo=' + encodeURIComponent('https://' + window.location.host + contextPath + osDestination));
	}

    var loginLoopCheck = getCookie("loginLoopCheck");
	  
	if (!loginLoopCheck) {
	  setCookie("loginLoopCheck", "true", contextPath, 1 * 60 * 1000);
	} else {
	  autoLogin = false;
	}
	
	if (autoLogin && autoLogin.toLowerCase() === "true") {
	  login();
	}

    function setCookie(name, value, path, lifeLength) {
	  var expires = "";
	  var date = new Date();
	  date.setTime(date.getTime() + lifeLength);
	  expires = "; expires=" + date.toUTCString();
	  document.cookie = name + "=" + (value || "") + expires + "; path=" + path;
	}
	  
	function getCookie(name) {
      var nameEQ = name + "=";
      var ca = document.cookie.split(';');
      for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') {
	      c = c.substring(1, c.length);
	    }
        if (c.indexOf(nameEQ) == 0) {
	      return c.substring(nameEQ.length, c.length);
	    }
      }
      return null;
    }
    
  </script>{/literal}
{% raw %}{webResourceManager_requireResourcesForContext('bitbucket.page.login')}
{call bitbucket.internal.layout.focused.focused.focused}
    {{param windowTitle: getText('bitbucket.web.login.title') /}}
    {param hideProfile: true /}
    {param bodyClass: 'user-login'/}
    {param focusedPageSize: 'small' /}
    {{param contentTitle: getText('bitbucket.web.login.header') /}}
    {param content}
        {call .loginPageHeaders data="all" /}
        {if $wasSuccessfulSignedUp}
            {call aui.message.success}
                {param extraClasses: 'successful-signup'/}
                {param content}
                    {getText('bitbucket.web.signup.success')}
                {/param}
            {/call}
        {/if}
        {call bitbucket.internal.widget.form.form.form}
            {param action}{nav_security_check()}{/param}
            {param isTopLabels: true /}
            {param content}
			<a href="#" onclick="login()">Click Here to Login</a>
			{/param}
        {/call}
    {/param}
    {param pageBottomContent}
        <script type="text/javascript">
            require('bitbucket/internal/page/login/login').onReady();
        </script>
    {/param}
{/call}
{/template}

/**
 * param showCaptcha
 * param? nextUrl
 * @param? error
 * param? lastUsername
 * param? permission
 * @param? warning
 * @param? helpText
 */
{template .loginEmbedded}
{webResourceManager_requireResourcesForContext('bitbucket.page.login')}
{call bitbucket.internal.layout.chromeless.chromeless}
    {{param windowTitle: getText('bitbucket.web.login.title') /}}
    {param bodyClass: 'user-login user-login-embedded'/}
    {param content}
        {call .loginPageHeaders data="all" /}
        {call bitbucket.internal.widget.form.form.form}
            {param action}{nav_security_check()}{/param}
            {param content}
			<a href="#" onclick="login()">Click Here to Login</a>
            {/param}
        {/call}
    {/param}
    {param pageBottomContent}
        <script type="text/javascript">
            require('bitbucket/internal/page/login/login').onReady();
        </script>
    {/param}
{/call}
{/template}

/**
 * @param? error
 * @param? warning
 * @param? helpText
 */
{template .loginPageHeaders private="true"}
    {if $error}
        {call aui.message.error}
            {param content}
                {$error}
            {/param}
        {/call}
    {/if}
    {if $warning}
        {call aui.message.warning}
            {param content}{$warning}{/param}
        {/call}
    {/if}
    {if $helpText}
        // TODO AUI Help styles are currently broken due to https://ecosystem.atlassian.net/browse/DP-266
        // check that this is rendered correctly when we update to AUI 5.7 final
        <div class="aui-help aui-help-text">
            <div class="aui-help-content">
                {$helpText}
            </div>
        </div>
    {/if}
{/template}

/**
 * @param? nextUrl
 * @param? permission
 * @param? queryString
 */
{template .loginPageHiddenParams private="true"}
    {if $nextUrl}
        <input name="next" type="hidden" value="{$nextUrl}"/>
    {/if}
    {if $permission}
        <input name="permission" type="hidden" value="{$permission}"/>
    {/if}
    {if $queryString}
        <input name="queryString" type="hidden" value="{$queryString}"/>
    {/if}
{/template}{% endraw %}